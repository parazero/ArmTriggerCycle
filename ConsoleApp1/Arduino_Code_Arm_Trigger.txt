//Arduino code for Arm-Trigger test bench.
//Uses Arduino MEGA
//all unmarked connectors are number left to right
//Arduino PIN	---- Other Devices pin
//	3 (PWM)		----	SmartAir UART 3 (Black)
// 14 (TX3)		----	FTDI 3
// 15 (RX3)		----	FTDI 2
// 16 (TX2)		----	SmartAir UART 1 (Green)
// 17 (RX2)		----	SmartAir UART 2 (Blue)
// 2  (PWM)		----	SmartAir RC 3 (Blue)
String inputString = "";         // a String to hold incoming data
String inputString2 = "";

boolean stringComplete = false;  // whether the string is complete
boolean stringComplete2 = false;
boolean wasInLow = true;
boolean printPulseWidth = false;

#define CHANNEL_1_PIN 3
#define CHANNEL_2_PIN 2
volatile unsigned long start_timer;
volatile unsigned long pulse_width;

boolean PWMwasInLow = true;
boolean PWMwasInHigh = true;
boolean PWMReset = true;

void calcSignal() 
{
    //record the interrupt time so that we can tell if the receiver has a signal from the transmitter 
    //if the pin has gone HIGH, record the microseconds since the Arduino started up 
    if( (digitalRead(CHANNEL_1_PIN) == HIGH)&& (wasInLow == false))
    { 
        Serial3.println("Motor Signal High");
        wasInLow = true;
        printPulseWidth = true;
        PWMwasInLow = false;
        PWMwasInHigh = false;
        PWMReset = true;
        delay(40);
        attachInterrupt(digitalPinToInterrupt(CHANNEL_2_PIN), calcSignal2, CHANGE);
    } 
    //otherwise, the pin has gone LOW 
    if (digitalRead(CHANNEL_1_PIN) == LOW)
    { 
        Serial3.println("Motor Signal Low");
        wasInLow = false;
        detachInterrupt(digitalPinToInterrupt(CHANNEL_2_PIN));
    }
} 
void calcSignal2() 
{
    if( (digitalRead(CHANNEL_2_PIN) == HIGH) && (PWMwasInLow == true))
    {
        start_timer = micros();
        //Serial.println("Motor Signal High");
        PWMwasInLow = false;
        PWMwasInHigh = true;
    }
    //otherwise, the pin has gone LOW
    if ( (digitalRead(CHANNEL_2_PIN) == LOW) && (PWMwasInHigh == true) )
    {
        pulse_width = (( (volatile long)micros() - start_timer)/10)*10;
        if( (digitalRead(CHANNEL_1_PIN) == HIGH)&& (printPulseWidth == true))
        {
          Serial3.print("PWM Pulse Width: " );
          Serial3.println(pulse_width);
          printPulseWidth = false;
        }
        //Serial.println("Motor Signal Low");        
        PWMwasInLow = false;
        PWMwasInHigh = false;
        PWMReset = true;
    }

    if ( (digitalRead(CHANNEL_2_PIN) == LOW) && (PWMReset == true) )
    {
        
        PWMwasInLow = true;
        PWMwasInHigh = false;
    }
}

void setup() {
  // initialize serial:
  PWMwasInLow = false;
  PWMwasInHigh = false;
  PWMReset = true;
  Serial.begin(115200);
  Serial2.begin(115200);//Telemetry Green Wire goes to TX2, Telemetry Blue Wire goes to RX2, Telemetry GND is not Mandatory
  Serial3.begin(115200);
  // reserve 200 bytes for the inputString:
  inputString2.reserve(200);

  attachInterrupt(digitalPinToInterrupt(CHANNEL_1_PIN), calcSignal, CHANGE);
  //attachInterrupt(digitalPinToInterrupt(CHANNEL_2_PIN), calcSignal2, CHANGE);
}

void loop() {
  // print the string when a newline arrives:
  serialEvent();
  if (stringComplete2) {
    Serial2.println(inputString2);
    // clear the string:
    inputString2 = "";
    stringComplete2 = false;
  }
}

/*
  SerialEvent occurs whenever a new data comes in the hardware serial RX. This
  routine is run between each time loop() runs, so using delay inside loop can
  delay response. Multiple bytes of data may be available.
*/
void serialEvent() {
  //Serial.println("w");
/*  while (Serial3.available()) 
  {
    Serial.println("Port3 New data:");
    Serial.println(Serial3.available());
    
    // get the new byte:
    char inChar = (char)Serial3.read();
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag so the main loop can
    // do something about it:
    if (inChar == '\n') 
    {
      stringComplete = true;
      //Serial.println("d");
    }
    if (inputString=="a")
    {
      Serial.println("<ARM>");
      Serial2.println("<ARM>");
    }
    if (inputString=="d")
    {
      Serial.println("<DISARM>");
      Serial2.println("<DISARM>");
    }
        if (inputString=="r")
    {
      Serial.println("<REARM>");
      Serial2.println("<REARM>");
    }
    if (inputString=="f")
    {
      Serial.println("<FIRE>");
      Serial2.println("<FIRE>");
    }
    inputString = "";
    Serial.println(inputString);
  }*/
  while (Serial2.available()) 
  {
    // get the new byte:
    //Serial2.setTimeout(100);
    //Serial.println("Port2 New data:");
    //Serial.println(Serial2.available());
    char inChar = (char)Serial2.read();
    //String TMP = Serial2.readString();
    // add it to the inputString:
    
    // if the incoming character is a newline, set a flag so the main loop can
    // do something about it:
    if (inChar == '\n') 
    {
      //stringComplete = true;
      //Serial.println("d");
      //Serial.println(inputString2);
      Serial3.println(inputString2);
      if (inputString2.substring(0,4)=="<1,0")
      {
        //Serial.println("<ARM>");
        Serial2.println("<ARM>");
        Serial3.println("<ARM>");
      }
      if (inputString2.substring(0,4)=="<1,1")
      {
        //Serial.println("<FIRE>");
        Serial2.println("<FIRE>");
        Serial3.println("<FIRE>");
      }
      inputString2 = "";
    //}
     //Serial3.println(TMP);
     //Serial.println("d");
    }
    else
    {
      inputString2 += inChar;
    }
  }
}